-- Services
local player = game.Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")
local TweenService = game:GetService("TweenService")

-- Clear old UI
if playerGui:FindFirstChild("CustomUI") then
	playerGui.CustomUI:Destroy()
end

-- ScreenGui setup
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "CustomUI"
screenGui.ResetOnSpawn = false
screenGui.IgnoreGuiInset = true
screenGui.Parent = playerGui

-- Background
local background = Instance.new("Frame")
background.Size = UDim2.new(1, 0, 1, 0)
background.BackgroundColor3 = Color3.fromRGB(180, 230, 180)
background.BorderSizePixel = 0
background.Parent = screenGui

local gradient = Instance.new("UIGradient")
gradient.Color = ColorSequence.new{
	ColorSequenceKeypoint.new(0, Color3.fromRGB(180, 230, 180)),
	ColorSequenceKeypoint.new(1, Color3.fromRGB(135, 206, 250))
}
gradient.Rotation = 45
gradient.Parent = background

-- Animate the gradient
spawn(function()
	while true do
		for i = 0, 360, 1 do
			gradient.Rotation = i
			wait(0.03)
		end
	end
end)

-- Drop shadow function
local function applyShadow(obj)
	local shadow = Instance.new("ImageLabel")
	shadow.Name = "Shadow"
	shadow.BackgroundTransparency = 1
	shadow.Size = UDim2.new(1, 6, 1, 6)
	shadow.Position = UDim2.new(0, -3, 0, -3)
	shadow.ZIndex = obj.ZIndex - 1
	shadow.Image = "rbxassetid://1316045217"
	shadow.ImageTransparency = 0.5
	shadow.ScaleType = Enum.ScaleType.Slice
	shadow.SliceCenter = Rect.new(10, 10, 118, 118)
	shadow.Parent = obj
end

-- Apply shadows to existing elements after they're created
local function applyShadowsToUI()
	for _, obj in pairs(screenGui:GetDescendants()) do
		if obj:IsA("Frame") or obj:IsA("TextLabel") or obj:IsA("TextButton") then
			applyShadow(obj)
		end
	end
end

-- Animate loading texts
local loadingTexts = {"Loading Assets...", "Fetching Available Scripts...", "Fetching Server's Data...", "Initializing Components..."}
local currentLoadingIndex = 1

-- Cartoon Loading Bar
local function createCartoonLoadingBar(duration, labelText, callback)
	local container = Instance.new("Frame")
	container.Size = UDim2.new(0.5, 0, 0.07, 0)
	container.Position = UDim2.new(0.25, 0, 0.5, 0)
	container.BackgroundTransparency = 1
	container.Parent = screenGui

	local label = Instance.new("TextLabel")
	label.Size = UDim2.new(1, 0, 0.4, 0)
	label.Position = UDim2.new(0, 0, -0.6, 0)
	label.Text = labelText or loadingTexts[1]
	label.BackgroundTransparency = 1
	label.Font = Enum.Font.FredokaOne
	label.TextColor3 = Color3.new(1, 1, 1)
	label.TextSize = 20
	label.TextStrokeTransparency = 0.8
	label.Parent = container

	local bg = Instance.new("ImageLabel")
	bg.Size = UDim2.new(1, 0, 0.6, 0)
	bg.Position = UDim2.new(0, 0, 0.4, 0)
	bg.BackgroundTransparency = 1
	bg.Image = "rbxassetid://607247449"
	bg.ScaleType = Enum.ScaleType.Slice
	bg.SliceCenter = Rect.new(10, 10, 90, 90)
	bg.Parent = container

	local fill = Instance.new("Frame")
	fill.Size = UDim2.new(0, 0, 1, 0)
	fill.BackgroundColor3 = Color3.fromRGB(102, 255, 102)
	fill.BorderSizePixel = 0
	fill.BackgroundTransparency = 0.2
	fill.Parent = bg

	Instance.new("UICorner", bg).CornerRadius = UDim.new(0, 12)
	Instance.new("UICorner", fill).CornerRadius = UDim.new(0, 12)

	local percent = Instance.new("TextLabel")
	percent.Size = UDim2.new(1, 0, 1, 0)
	percent.BackgroundTransparency = 1
	percent.Text = "0%"
	percent.Font = Enum.Font.FredokaOne
	percent.TextColor3 = Color3.new(1, 1, 1)
	percent.TextSize = 16
	percent.TextStrokeTransparency = 0.8
	percent.Parent = bg

	-- Animated text updater
	task.spawn(function()
		while container.Parent do
			label.Text = loadingTexts[currentLoadingIndex]
			currentLoadingIndex = currentLoadingIndex % #loadingTexts + 1
			wait(2)
		end
	end)

	-- Smooth loading with stucks
	task.spawn(function()
		local current = 0
		local stucks = {20, 60, 95}
		for i = 1, 100 do
			current = i
			fill.Size = UDim2.new(current / 100, 0, 1, 0)
			percent.Text = current .. "%"
			if table.find(stucks, i) then
				wait(1.2)
			else
				wait(duration / 100)
			end
		end
		wait(0.5)
		container:Destroy()
		if callback then callback() end
	end)
end

-- Kick off loading and apply shadows after UI is fully created
createCartoonLoadingBar(30, nil, applyShadowsToUI)
